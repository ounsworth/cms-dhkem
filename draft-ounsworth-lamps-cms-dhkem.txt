



LAMPS                                                       M. Ounsworth
Internet-Draft                                                   J. Gray
Intended status: Standards Track                                 Entrust
Expires: 6 July 2024                                          R. Housley
                                                          Vigil Security
                                                          3 January 2024


  Use of the DH-Based KEM (DHKEM) in the Cryptographic Message Syntax
                                 (CMS)
                 draft-ounsworth-lamps-cms-dhkem-latest

Abstract

   The DHKEM Algorithm is a one-pass (store-and-forward) mechanism for
   establishing keying data to a recipient using the recipient's Diffie-
   Hellman or Elliptic Curve Diffie-Hellman public key.  This document
   uses a straightforward application of [RFC9180] to define a mechanism
   to wrap Ephemeral-Static (E-S) Diffie-Hellman (DH) and Elliptic Curve
   Diffie-Hellman (ECDH) such that it can be used in KEM interfaces
   within the Cryptographic Message Syntax (CMS).  This is a sister
   document to RSA-KEM [RFC5990] and simplifies future cryptographic
   protocol design by only needing to handle KEMs at the protocol level.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://EntrustCorporation.github.io/cms-dhkem/draft-ietf-ounsworth-
   cms-dhkem.html.  Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-ounsworth-lamps-cms-dhkem/.

   Discussion of this document takes place on the Limited Additional
   Mechanisms for PKIX and SMIME (lamps) Working Group mailing list
   (mailto:spasm@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/spasm/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/spasm/.

   Source for this draft and an issue tracker can be found at
   https://github.com/EntrustCorporation/cms-dhkem.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 6 July 2024.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Use of DHKEM in CMS
     3.1.  RecipientInfo Conventions
     3.2.  Certificate Conventions
     3.3.  SMIMECapabilities Attribute Conventions
   4.  DHKEM Algorithms
   5.  ASN.1 Module
   6.  Security Considerations
   7.  IANA Considerations
     7.1.  Object Identifier Allocations
       7.1.1.  Module Registration - SMI Security for S/MIME Module
               Identifer
       7.1.2.  Object Identifier Registrations - SMI Security for S/
               MIME Attributes
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Appendix A.  DH-Based KEM (DHKEM) Algorithm
   Appendix B.  Cryptographic dependencies
     B.1.  Key Derivation Function
     B.2.  (Elliptic Curve) Diffie Hellman
     B.3.  DHKEM
       B.3.1.  KDF Functions
       B.3.2.  DHKEM Functions
   Acknowledgments
   Authors' Addresses

1.  Introduction

   The Cryptographic Message Syntax (CMS) enveloped-data content type
   [RFC5652] and the CMS authenticated-enveloped-data content type
   [RFC5083] support both key transport and key agreement algorithms to
   establish the key used to encrypt the content.  In recent years,
   cryptographers have been specifying asymmetric key establishment
   algorithms, including Post-Quantum algorithms as Key Encapsulation
   Mechanism (KEMs).  This document defines conventions for wrapping
   Ephemeral-Static (E-S) Diffie-Hellman (DH) and Elliptic Curve Diffie-
   Hellman (ECDH) key agreements to fit the KEM interface for the CMS
   enveloped-data content type and the CMS authenticated-enveloped-data
   content type via the KEMRecipientInfo as defined in
   [I-D.ietf-lamps-cms-kemri].  This is a parallel mechanism to
   [RFC5990] which does the same for RSA.  The benefit is to allow
   forward-compatibility of older DH-based ciphers into new mechanisms
   that only support KEMs including the PQ/T Hybrid mechanisms specified
   in [I-D.ietf-lamps-pq-composite-kem].

   A KEM algorithm is a one-pass (store-and-forward) mechanism for
   encapsulating keying material for a recipient using the recipient's
   public key.  The recipient's private key is needed to recover the
   keying material, which is then treated as a pairwise shared secret
   between the sender and recipient.  A KEM algorithm provides three
   functions:

   *  KeyGen() -> (pk, sk):

      Generate a public key (pk) and a corresponding private key (sk).
      This function is identical to the DH.KeyGen() of the underlying
      Diffie-Hellman primitive.

   *  Encapsulate(pk) -> (ct, ss):

      Given the recipient's public key (pk), produce a ciphertext (ct)
      to be passed to the recipient and shared secret (ss) for the
      sender.

   *  Decapsulate(sk, ct) -> ss:

      Given the private key (sk) and the ciphertext (ct), recover the
      shared secret (ss) for the recipient.

   To support a particular KEM algorithm, the CMS sender MUST implement
   KeyGen() and Encapsulate().

   To support a particular KEM algorithm, the CMS recipient MUST
   implement KeyGen() and Decapsulate().  The recipient's public key is
   usually carried in a certificate [RFC5280].

   This draft follows the DH-Based KEM (DHKEM) construction defined in
   [RFC9180] whereby the Encapsulate() operation includes the generation
   of an ephemeral key and the usage of that key against the recipient's
   static public key.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Use of DHKEM in CMS

   This is a straightforward application of the DHKEM construction from
   [RFC9180] section 4.1 which is to be used unmodified, and is copied
   below in Appendix A for convenience.

   CMS encrypt operations performed by the sender are to use Encap(pkR).
   CMS decrypt operations performed by the received are to use
   Decap(enc, skR).

   The authenticated modes defined in [RFC9180], AuthEncap(pkR, skS) and
   AuthDecap(enc, skR, pkS) do not apply to CMS because CMS uses DH in
   only the ephemeral-static modes and provides sender authentication
   through separate digital signatures.

3.1.  RecipientInfo Conventions

   When the DHKEM Algorithm is employed for a recipient, the
   RecipientInfo alternative for that recipient MUST be
   OtherRecipientInfo using the KEMRecipientInfo structure
   [I-D.ietf-lamps-cms-kemri].  The fields of the KEMRecipientInfo MUST
   have the following values:

     version is the syntax version number; it MUST be 0.

     rid identifies the recipient's certificate or public key.

     kem identifies the KEM algorithm; it MUST contain one of the
     algorithms listed in {{sec-dhkem-algs}}.

     kemct is the ciphertext produced for this recipient; it contains
     the output `enc` from `Encap(pkR)` which
     is the serialized ephemeral public key of the sender.

     kdf identifies the key-derivation algorithm.

     kekLength is the size of the key-encryption key in octets.

     ukm is an optional random input to the key-derivation function.

     wrap identifies a key-encryption algorithm used to encrypt the
     content-encryption key.

     encryptedKey is the result of encrypting the keying material with
     the key-encryption key.  When used with the CMS enveloped-data
     content type [RFC5652], the keying material is a content-
     encryption key.  When used with the CMS authenticated-data content
     type [RFC5652], the keying material is a message-authentication
     key.  When used with the CMS authenticated-enveloped-data content
     type [RFC5083], the keying material is a content-authenticated-
     encryption key.

3.2.  Certificate Conventions

   TODO:

   The conventions specified in this section augment [RFC5280].

   A recipient who employs the DH-KEM key establishment algorithm MAY
   identify the public key in a certificate by the same
   AlgorithmIdentifier as for the underlying DH algorithm as listed in
   Section 4, for example, using the id-ecPublicKey object identifier
   [RFC5480].  The fact that the user will accept DH-KEM with this
   public key is not indicated by the use of this identifier.  This MAY
   be signaled by the use of the appropriate SMIME Capabilities either
   in a message or in the certificate.

   If the recipient wishes only to employ the DH-KEM key establishment
   algorithm with a given public key, the recipient MUST identify the
   public key in the certificate using one of the object identifiers
   listed in Section 4.  When a DH-KEM algorithm identifier appears in
   the SubjectPublicKeyInfo algorithm field, the encoding SHALL omit the
   parameters field from AlgorithmIdentifier.  That is, the
   AlgorithmIdentifier SHALL be a SEQUENCE of one component, the DH-KEM
   object identifier.

   Regardless of the AlgorithmIdentifier used, the RSA public key is
   encoded in the same manner in the subject public key information.
   The RSA public key MUST be encoded as per the underlying DH
   Algorithm.

   The intended application for the key MAY be indicated in the key
   usage certificate extension (see [RFC5280], Section 4.2.1.3).  If the
   keyUsage extension is present in a certificate that conveys a public
   key for use with a DH-KEM algorithm as discussed above, then the key
   usage extension MUST contain the following value:

   keyEncipherment

   keyAgreement MAY be present if the key is also meant to be used with
   traditional Key Agreement Algorithms.  By convention, KEM Algorithms
   use the keyEncipmerment keyUsage.

   dataEncipherment SHOULD NOT be present.  Key Usages related to
   digital signatures MUST NOT be present.

3.3.  SMIMECapabilities Attribute Conventions

   Section 2.5.2 of [RFC8551] defines the SMIMECapabilities signed
   attribute (defined as a SEQUENCE of SMIMECapability SEQUENCEs) to
   announce a partial list of algorithms that an S/MIME implementation
   can support.  When constructing a CMS signed-data content type
   [RFC5652], a compliant implementation MAY include the
   SMIMECapabilities signed attribute announcing that it supports the
   DHKEM Algorithm.

   The SMIMECapability SEQUENCE representing the DHKEM Algorithm MUST
   include one of the object identifiers listed in Section 4 in the
   capabilityID field.  A DHKEM algorithm MUST be used with the
   KEMRecipientInfo with its field populated as specified in
   Section 3.1.

   The definition of KEMAlgorithms from [I-D.ietf-lamps-cms-kemri]

    KEMAlgorithms KEM-ALGORITHM ::= { kema-kem-rsa | kema-rsa-kem, ... }

   is extended to add kema-dhkem.

   TODO / EDNOTE: I actually don't know how to extend something in
   ASN.1.

   DhAlgorithm ::=
     AlgorithmIdentifier { KEY-AGREE, {DhAlgorithms} }

   DhAlgorithms KEY-AGREE ::= { kaa-X25519, kaa-X448, ... }

   EDNOTE: I kinda just want to borrow / extend this from RFC8418:

      KeyAgreementAlgs KEY-AGREE ::= { ...,
        kaa-dhSinglePass-stdDH-sha256kdf-scheme   |
        kaa-dhSinglePass-stdDH-sha384kdf-scheme   |
        kaa-dhSinglePass-stdDH-sha512kdf-scheme   |
        kaa-dhSinglePass-stdDH-hkdf-sha256-scheme |
        kaa-dhSinglePass-stdDH-hkdf-sha384-scheme |
        kaa-dhSinglePass-stdDH-hkdf-sha512-scheme }

4.  DHKEM Algorithms

   This section provides a registry of algorithms to satisfy the
   specific DHKEM and KDF algoritms required in Appendix B.3.

    +===============+======================+=============+===========+
    | DHKEM         | DH Algorithm         | KDF         | kekLength |
    | Algorithm OID |                      | Algorithm   |           |
    +===============+======================+=============+===========+
    | TBD-DHKEM1    | ECDH-P256            | HKDF-SHA256 | 32        |
    +---------------+----------------------+-------------+-----------+
    | TBD-DHKEM2    | ECDH-brainpoolP256r1 | HKDF-SHA256 | 32        |
    +---------------+----------------------+-------------+-----------+
    | TBD-DHKEM3    | X25519               | HKDF-SHA256 | 32        |
    +---------------+----------------------+-------------+-----------+
    | TBD-DHKEM4    | ECDH-P384            | HKDF-SHA384 | 48        |
    +---------------+----------------------+-------------+-----------+
    | TBD-DHKEM5    | ECDH-brainpoolP384r1 | HKDF-SHA384 | 48        |
    +---------------+----------------------+-------------+-----------+
    | TBD-DHKEM6    | X448                 | HKDF-SHA512 | 64        |
    +---------------+----------------------+-------------+-----------+

                   Table 1: Registered DHKEM Algorithms

   Full specifications for the referenced algorithms can be found as
   follows:

   *  _ECDH_: There does not appear to be a single IETF definition of
      ECDH, so we refer to the following:

      -  _ECDH NIST_: SHALL be Elliptic Curve Cryptography Cofactor
         Diffie-Hellman (ECC CDH) as defined in section 5.7.1.2 of
         [SP.800-56Ar3].

      -  _ECDH BSI / brainpool_: SHALL be Elliptic Curve Key Agreement
         algorithm (ECKA) as defined in section 4.3.1 of [BSI-ECC]

   *  _X25519 / X448_: [RFC7784]

   *  _HKDF-SHA2_: [RFC5869].

   blah blah when used in an AlgorithmIdentifier ... empty params.

   blah blah KDF and kekLen MUST be the same as specified in KEMRI ...
   copy the language from 5990bis.

5.  ASN.1 Module

   In order to carry a DHKEM inside a CMS KEMRecipientInfo
   [I-D.ietf-lamps-cms-kemri], we define id-kem-dhkem, kema-dhkem, and
   DHKemParameters.

   TODO: sync this up with the extra stuff added in the body.

   <CODE STARTS>

   CMS-DHKEM-2024
       { iso(1) member-body(2) us(840) rsadsi(113549)
         pkcs(1) pkcs-9(9) smime(16) modules(0)
         id-mod-cms-dhkem-2024(TBDMOD) }

     DEFINITIONS IMPLICIT TAGS ::=
     BEGIN
     -- EXPORTS ALL;

     IMPORTS

     AlgorithmIdentifier{}, KEY-AGREE, KEY-DERIVATION
       FROM AlgorithmInformation-2009
         { iso(1) identified-organization(3) dod(6) internet(1)
           security(5) mechanisms(5) pkix(7) id-mod(0)
           id-mod-algorithmInformation-02(58) }

      KEM-ALGORITHM
        FROM KEMAlgorithmInformation-2023 -- [I-D.ietf-lamps-cms-kemri]
          { iso(1) identified-organization(3) dod(6) internet(1)
            security(5) mechanisms(5) pkix(7) id-mod(0)
            id-mod-kemAlgorithmInformation-2023(TBD) }

      pk-dh, pk-ec
        FROM PKIXAlgs-2009
          { iso(1) identified-organization(3) dod(6) internet(1)
            security(5) mechanisms(5) pkix(7) id-mod(0)
            id-mod-pkix1-algorithms2008-02(56) }

     pk-X25519, pk-X448
       FROM Safecurves-pkix-18
         { iso(1) identified-organization(3) dod(6) internet(1)
           security(5) mechanisms(5) pkix(7) id-mod(0)
           id-mod-safecurves-pkix(93) }

   TODO: imports:
   TODO: KEY-AGREE FROM AlgorithmInformation-2009
          {iso(1) identified-organization(3) dod(6) internet(1) security(5)
          mechanisms(5) pkix(7) id-mod(0)
          id-mod-algorithmInformation-02(58)}

   TODO: kaa-X25519, kaa-x448 from 8410

     ;




     id-alg-dhkem OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
         rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) TBDALG }

     kema-dhkem KEM-ALGORITHM ::= {
         IDENTIFIER id-alg-dhkem
         PARAMS TYPE DHKemParameters ARE optional
         PUBLIC-KEYS { pk-dh | pk-ec | pk-X25519 | pk-X448 }
         UKM ARE optional
         SMIME-CAPS { TYPE DHKemParameters IDENTIFIED BY id-kem-dhkem } }

   END

   <CODE ENDS>

   EDNOTE: The other way to define this would be to call out a toplevel
   DHKEM for each one: id-kema-dhkem-dh id-kema-dhkem-ecdh, id-kema-
   dhkem-x25519, id-kema-dhkem-x448.

   EDNOTE: This approach adds a layer of wrapping for the benefit of
   agility and future-proofing.  I would be happy to unroll them into
   separate OIDs if that's considered better.

6.  Security Considerations

   This document provides an IND-CCA2 secure DHKEM construction.

   This document does not add any security considerations above those
   already present for the Ephemeral-Static mode of the underlying
   (EC)DH primitive and in [RFC9180].

7.  IANA Considerations

   This document registers the OID id-alg-dhkem

   The IANA is requested to allocate a value from the "SMI Security for
   S/MIME Module Identifier" registry for the included ASN.1 module, and
   allocate values from "SMI Security for S/MIME Algorithms" to identify
   the new algorithm defined within.

7.1.  Object Identifier Allocations

7.1.1.  Module Registration - SMI Security for S/MIME Module Identifer

   *  Decimal: IANA Assigned - Replace TBDMOD

   *  Description: CMS-DHKEM-2023 - id-mod-cms-dhkem-2023

   *  References: This Document

7.1.2.  Object Identifier Registrations - SMI Security for S/MIME
        Attributes

   *  DHKEM

      -  Decimal: IANA Assigned - Replace TBDALG

      -  Description: id-alg-dhkem

      -  References: This Document

8.  References

8.1.  Normative References

   [I-D.ietf-lamps-cms-kemri]
              Housley, R., Gray, J., and T. Okubo, "Using Key
              Encapsulation Mechanism (KEM) Algorithms in the
              Cryptographic Message Syntax (CMS)", Work in Progress,
              Internet-Draft, draft-ietf-lamps-cms-kemri-06, 21 October
              2023, <https://datatracker.ietf.org/doc/html/draft-ietf-
              lamps-cms-kemri-06>.

   [I-D.ietf-lamps-pq-composite-kem]
              Ounsworth, M. and J. Gray, "Composite KEM For Use In
              Internet PKI", Work in Progress, Internet-Draft, draft-
              ietf-lamps-pq-composite-kem-02, 23 October 2023,
              <https://datatracker.ietf.org/doc/html/draft-ietf-lamps-
              pq-composite-kem-02>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC5083]  Housley, R., "Cryptographic Message Syntax (CMS)
              Authenticated-Enveloped-Data Content Type", RFC 5083,
              DOI 10.17487/RFC5083, November 2007,
              <https://www.rfc-editor.org/rfc/rfc5083>.

   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/rfc/rfc5280>.

   [RFC5652]  Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, DOI 10.17487/RFC5652, September 2009,
              <https://www.rfc-editor.org/rfc/rfc5652>.

   [RFC7748]  Langley, A., Hamburg, M., and S. Turner, "Elliptic Curves
              for Security", RFC 7748, DOI 10.17487/RFC7748, January
              2016, <https://www.rfc-editor.org/rfc/rfc7748>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8551]  Schaad, J., Ramsdell, B., and S. Turner, "Secure/
              Multipurpose Internet Mail Extensions (S/MIME) Version 4.0
              Message Specification", RFC 8551, DOI 10.17487/RFC8551,
              April 2019, <https://www.rfc-editor.org/rfc/rfc8551>.

8.2.  Informative References

   [RFC5480]  Turner, S., Brown, D., Yiu, K., Housley, R., and T. Polk,
              "Elliptic Curve Cryptography Subject Public Key
              Information", RFC 5480, DOI 10.17487/RFC5480, March 2009,
              <https://www.rfc-editor.org/rfc/rfc5480>.

   [RFC5990]  Randall, J., Kaliski, B., Brainard, J., and S. Turner,
              "Use of the RSA-KEM Key Transport Algorithm in the
              Cryptographic Message Syntax (CMS)", RFC 5990,
              DOI 10.17487/RFC5990, September 2010,
              <https://www.rfc-editor.org/rfc/rfc5990>.

   [RFC9180]  Barnes, R., Bhargavan, K., Lipp, B., and C. Wood, "Hybrid
              Public Key Encryption", RFC 9180, DOI 10.17487/RFC9180,
              February 2022, <https://www.rfc-editor.org/rfc/rfc9180>.

Appendix A.  DH-Based KEM (DHKEM) Algorithm

   TODO

Appendix B.  Cryptographic dependencies

B.1.  Key Derivation Function

   A key derivation function (KDF):

   *  Extract(salt, ikm) -> prk: Extract a pseudorandom key of fixed
      length keyLength bytes from input keying material ikm and an
      optional byte string salt.

   *  Expand(prk, info, L) -> ss: Expand a pseudorandom key prk using
      optional string info into L bytes of output keying material.

   *  keyLength: The output size of the Extract() function in bytes.

   In the pseudo-code below, these are combined into a single function:

   *  ExtractAndExpand(ikm, info) -> ss.

B.2.  (Elliptic Curve) Diffie Hellman

   An elliptic curve or finite field Diffie-Hellman group providing the
   following operations:

   *  GenerateKeyPair() -> (pk, sk): create a new DH key.

   *  DH(skX, pkY) -> ss: Perform a non-interactive Diffie-Hellman
      exchange using the private key skX and public key pkY to produce a
      Diffie-Hellman shared secret of length Ndh. This function can
      raise a ValidationError as described in [RFC9180] Section 7.1.4.

   These definitions are taken from [RFC9180] and reproduced here for
   convenience.

B.3.  DHKEM

B.3.1.  KDF Functions

   The KDF functions are defined as follows.

   def LabeledExtract(salt, label, ikm):
     labeled_ikm = concat("HPKE-v1", suite_id, label, ikm)
     return Extract(salt, labeled_ikm)

   def LabeledExpand(prk, label, info, L):
     labeled_info = concat(I2OSP(L, 2), "HPKE-v1", suite_id,
                           label, info)
     return Expand(prk, labeled_info, L)

   def ExtractAndExpand(dh, kem_context):
     eae_prk = LabeledExtract("", "eae_prk", dh)
     shared_secret = LabeledExpand(eae_prk, "shared_secret",
                                   kem_context, Nsecret)
     return shared_secret

                   Figure 1: KDF functions from RFC 9180

   Note that the KDF functions require Extract(), which is a direct call
   to the underlying KDF, which [RFC9180] allows to be HKDF-SHA256,
   HKDF-SHA384, or HKDF-SHA512.

B.3.2.  DHKEM Functions

   The DHKEM functions are defined as follows:

   def Encap(pkR):
     skE, pkE = GenerateKeyPair()
     dh = DH(skE, pkR)
     enc = SerializePublicKey(pkE)

     pkRm = SerializePublicKey(pkR)
     kem_context = concat(enc, pkRm)

     shared_secret = ExtractAndExpand(dh, kem_context)
     return shared_secret, enc

   def Decap(enc, skR):
     pkE = DeserializePublicKey(enc)
     dh = DH(skR, pkE)

     pkRm = SerializePublicKey(pk(skR))
     kem_context = concat(enc, pkRm)

     shared_secret = ExtractAndExpand(dh, kem_context)
     return shared_secret

                  Figure 2: DHKEM functions from RFC 9180

   Note that the DHKEM functions require GenerateKeyPair(), DH(sk, pk),
   SerializePublicKey(pk), and DeserializePublicKey(enc), which are
   provided by the underlying DH scheme.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Mike Ounsworth
   Entrust Limited
   2500 Solandt Road – Suite 100
   Ottawa, Ontario  K2K 3G5
   Canada
   Email: mike.ounsworth@entrust.com


   John Gray
   Entrust Limited
   2500 Solandt Road – Suite 100
   Ottawa, Ontario  K2K 3G5
   Canada
   Email: john.gray@entrust.com


   Russ Housley
   Vigil Security, LLC
   Herndon, VA,
   United States of America
   Email: housley@vigilsec.com
